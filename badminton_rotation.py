import streamlit as st
import random

# -----------------------------
# Session State Initialization
# -----------------------------
if "players" not in st.session_state:
    st.session_state.players = []
if "matches" not in st.session_state:
    st.session_state.matches = []
if "current_match" not in st.session_state:
    st.session_state.current_match = None
if "win_streak" not in st.session_state:
    st.session_state.win_streak = {}
if "games_played" not in st.session_state:
    st.session_state.games_played = {}
if "resting" not in st.session_state:
    st.session_state.resting = None


# -----------------------------
# Utility Functions
# -----------------------------
def reset_game():
    st.session_state.matches = []
    st.session_state.current_match = None
    st.session_state.win_streak = {p: 0 for p in st.session_state.players}
    st.session_state.games_played = {p: 0 for p in st.session_state.players}
    st.session_state.resting = None
    make_new_round()


def make_teams(players):
    random.shuffle(players)
    teams = [players[i:i+2] for i in range(0, len(players), 2)]
    return teams


def make_new_round():
    players = st.session_state.players.copy()

    # ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏µ‡πà ‚Üí ‡πÉ‡∏´‡πâ‡∏û‡∏±‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏¢‡∏≠‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    if len(players) % 2 == 1:
        most_played = max(st.session_state.games_played, key=st.session_state.games_played.get)
        st.session_state.resting = most_played
        players.remove(most_played)
    else:
        st.session_state.resting = None

    teams = make_teams(players)

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏°‡∏ï‡∏ä‡πå‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡∏°
    st.session_state.matches = []
    for i in range(0, len(teams), 2):
        if i+1 < len(teams):
            st.session_state.matches.append((teams[i], teams[i+1]))

    if st.session_state.matches:
        st.session_state.current_match = st.session_state.matches.pop(0)
    else:
        st.session_state.current_match = None


def process_result(winner_side):
    match = st.session_state.current_match
    if not match:
        return

    left, right = match
    winner = left if winner_side == "left" else right
    loser = right if winner_side == "left" else left

    # update games played
    for p in winner + loser:
        st.session_state.games_played[p] += 1

    # update win streak
    for p in winner:
        st.session_state.win_streak[p] += 1
    for p in loser:
        st.session_state.win_streak[p] = 0

    # ‡∏ñ‡πâ‡∏≤‡∏ä‡∏ô‡∏∞‡∏ï‡∏¥‡∏î 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏≠‡∏Å
    if all(st.session_state.win_streak[p] >= 2 for p in winner):
        for p in winner:
            st.session_state.win_streak[p] = 0
        survivor = None
    else:
        survivor = winner

    # ‡∏Ñ‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà
    available = [p for p in st.session_state.players if p not in winner + loser]
    if st.session_state.resting:
        available.append(st.session_state.resting)

    if available:
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏•‡πà‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏™‡∏∏‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
        sorted_players = sorted(available, key=lambda x: st.session_state.games_played[x])
        new_players = sorted_players[:len(loser)]
    else:
        new_players = []

    if survivor:
        st.session_state.current_match = (survivor, new_players)
    else:
        if len(new_players) == 4:
            st.session_state.current_match = (new_players[:2], new_players[2:])
        else:
            make_new_round()


# -----------------------------
# UI
# -----------------------------
st.title("üè∏ Badminton Match Rotation")

# Input players
if not st.session_state.players:
    st.subheader("‡πÉ‡∏™‡πà‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 16 ‡∏Ñ‡∏ô, ‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà)")
    names_text = st.text_area("‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô", "")
    if st.button("‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°"):
        players = [n.strip() for n in names_text.split("\n") if n.strip()]
        if 2 <= len(players) <= 16:
            st.session_state.players = players
            reset_game()
            st.rerun()
        else:
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 2 ‡∏ñ‡∏∂‡∏á 16 ‡∏Ñ‡∏ô")
else:
    # Current Match
    if st.session_state.current_match:
        left, right = st.session_state.current_match
        col1, col2, col3 = st.columns([1, 1, 1])

        with col1:
            st.subheader("‡∏ó‡∏µ‡∏°‡∏ã‡πâ‡∏≤‡∏¢")
            st.write(", ".join(left))
            if st.button("‚úÖ ‡∏ó‡∏µ‡∏°‡∏ã‡πâ‡∏≤‡∏¢‡∏ä‡∏ô‡∏∞"):
                process_result("left")
                st.rerun()

        with col2:
            st.subheader("VS")

        with col3:
            st.subheader("‡∏ó‡∏µ‡∏°‡∏Ç‡∏ß‡∏≤")
            st.write(", ".join(right))
            if st.button("‚úÖ ‡∏ó‡∏µ‡∏°‡∏Ç‡∏ß‡∏≤‡∏ä‡∏ô‡∏∞"):
                process_result("right")
                st.rerun()

    else:
        st.info("‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà...")
        if st.button("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà"):
            make_new_round()
            st.rerun()

    # Stats
    st.subheader("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô")
    for p in st.session_state.players:
        st.write(f"{p}: ‡πÄ‡∏•‡πà‡∏ô {st.session_state.games_played[p]} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á | Win Streak: {st.session_state.win_streak[p]}")

    if st.session_state.resting:
        st.info(f"üõë ‡∏û‡∏±‡∏Å: {st.session_state.resting}")

    # Controls
    st.subheader("‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£")
    if st.button("üîÑ Reset ‡πÄ‡∏Å‡∏°"):
        reset_game()
        st.rerun()
    if st.button("üîÉ Refresh"):
        st.rerun()
