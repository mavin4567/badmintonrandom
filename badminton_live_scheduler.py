import streamlit as st
import random
from typing import List, Optional

# ============================================================
# üè∏ Badminton Live Scheduler ‚Äî Logic ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
# ============================================================

ss = st.session_state
DEFAULT_NAMES = ""

# -----------------------------
# Session State Initialization
# -----------------------------
DEFAULTS = {
    "players": [],
    "current_match": None,
    "queue": [],
    "winner_streak": {"team": None, "count": 0},
    "history": [],
    "stats": {},
    "resting_player": None,
}
for k, v in DEFAULTS.items():
    if k not in ss:
        ss[k] = v


# -----------------------------
# Helper Functions
# -----------------------------
def force_rerun():
    try:
        st.rerun()
    except Exception:
        try:
            st.experimental_rerun()
        except Exception:
            pass


def init_stats(players: List[str]):
    ss.stats = {p: {"played": 0, "win": 0} for p in players}


def _choose_resting_player(players: List[str]) -> Optional[str]:
    """‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ô‡∏û‡∏±‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏™‡∏∏‡∏î"""
    if len(players) % 2 == 0:
        return None
    min_played = min(ss.stats.get(p, {"played": 0})["played"] for p in players)
    candidates = [p for p in players if ss.stats.get(p, {"played": 0})["played"] == min_played]
    return random.choice(candidates)


def _pair_teams(players: List[str]) -> List[List[str]]:
    shuffled = players[:]
    random.shuffle(shuffled)
    return [shuffled[i:i+2] for i in range(0, len(shuffled), 2)]


def start_new_round():
    players = ss.players[:]
    if len(players) < 4:
        ss.current_match = None
        ss.queue = []
        return

    ss.resting_player = _choose_resting_player(players)
    active = [p for p in players if p != ss.resting_player]

    teams = _pair_teams(active)
    if len(teams) < 2:
        ss.current_match = None
        ss.queue = []
        return

    ss.current_match = (teams[0], teams[1])
    ss.queue = teams[2:]
    ss.winner_streak = {"team": None, "count": 0}


def _update_stats(team: List[str], *, is_winner: bool):
    for p in team:
        ss.stats[p]["played"] += 1
        if is_winner:
            ss.stats[p]["win"] += 1


def _fmt_team(team: List[str]) -> str:
    return " & ".join(team)


def _pick_next_team() -> Optional[List[str]]:
    """‡∏î‡∏∂‡∏á‡∏ó‡∏µ‡∏°‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß‡∏´‡∏°‡∏î"""
    if ss.queue:
        return ss.queue.pop(0)

    # ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß‡∏´‡∏°‡∏î ‚Üí ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà
    start_new_round()
    if ss.current_match:
        left, right = ss.current_match
        return right  # ‡πÉ‡∏´‡πâ‡∏ó‡∏µ‡∏°‡∏Ç‡∏ß‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡∏°‡πÉ‡∏´‡∏°‡πà
    return None


def process_result(winner_side: str):
    if not ss.current_match:
        return

    left, right = ss.current_match
    winner = left if winner_side == "left" else right
    loser = right if winner_side == "left" else left

    ss.history.append(f"{_fmt_team(winner)} ‚úÖ ‡∏ä‡∏ô‡∏∞ {_fmt_team(loser)} ‚ùå")
    _update_stats(winner, is_winner=True)
    _update_stats(loser, is_winner=False)

    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï streak
    if ss.winner_streak["team"] == winner:
        ss.winner_streak["count"] += 1
    else:
        ss.winner_streak = {"team": winner, "count": 1}

    # ‡∏ñ‡πâ‡∏≤‡∏ä‡∏ô‡∏∞ 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡∏¥‡∏î ‚Üí ‡∏≠‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏ó‡∏µ‡∏°
    if ss.winner_streak["count"] >= 2:
        team1 = _pick_next_team()
        team2 = _pick_next_team()
        if team1 and team2:
            ss.current_match = (team1, team2)
        else:
            start_new_round()
        ss.winner_streak = {"team": None, "count": 0}
    else:
        # ‡∏ó‡∏µ‡∏°‡∏ä‡∏ô‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏ï‡πà‡∏≠
        incoming = _pick_next_team()
        if incoming:
            ss.current_match = (winner, incoming)
        else:
            start_new_round()

    force_rerun()


# -----------------------------
# UI
# -----------------------------
st.title("üè∏ Badminton Live Scheduler")
st.caption("‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏¢‡∏∏‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏° ‚Äî ‡∏ó‡∏µ‡∏°‡∏ä‡∏ô‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏ï‡πà‡∏≠, ‡∏ó‡∏µ‡∏°‡πÅ‡∏û‡πâ‡∏≠‡∏≠‡∏Å, ‡∏ä‡∏ô‡∏∞‡∏ï‡∏¥‡∏î 2 ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å ‚ú®")

# ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
st.subheader("üë• ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 16 ‡∏Ñ‡∏ô)")
names_input = st.text_area("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ (‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô)", DEFAULT_NAMES, height=180)
players = [n.strip() for n in names_input.split("\n") if n.strip()]

c1, c2, c3 = st.columns(3)
with c1:
    if st.button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà"):
        if len(players) < 4:
            st.error("‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 4 ‡∏Ñ‡∏ô")
        elif len(players) > 16:
            st.error("‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 16 ‡∏Ñ‡∏ô")
        else:
            ss.players = players
            init_stats(players)
            start_new_round()
            force_rerun()
with c2:
    if st.button("‚ôªÔ∏è Reset"):
        for k in list(ss.keys()):
            del ss[k]
        force_rerun()
with c3:
    if st.button("üîÉ Refresh"):
        force_rerun()

# ‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏Å
if ss.get("resting_player"):
    st.info(f"üë§ ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ: **{ss.resting_player}**")

# ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
if ss.get("current_match"):
    left, right = ss.current_match
    st.subheader("üéØ ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")
    st.markdown(f"**‡∏ó‡∏µ‡∏°‡∏ã‡πâ‡∏≤‡∏¢:** {_fmt_team(left)} üÜö **‡∏ó‡∏µ‡∏°‡∏Ç‡∏ß‡∏≤:** {_fmt_team(right)}")

    c1, c2 = st.columns(2)
    with c1:
        if st.button("‚úÖ ‡∏ó‡∏µ‡∏°‡∏ã‡πâ‡∏≤‡∏¢‡∏ä‡∏ô‡∏∞"):
            process_result("left")
    with c2:
        if st.button("‚úÖ ‡∏ó‡∏µ‡∏°‡∏Ç‡∏ß‡∏≤‡∏ä‡∏ô‡∏∞"):
            process_result("right")

    if ss.get("queue"):
        st.caption("‡∏Ñ‡∏¥‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:")
        for t in ss.queue:
            st.write(f"‚Ä¢ {_fmt_team(t)}")
else:
    if ss.get("players"):
        st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πà‡∏ô ‚Äî ‡∏Å‡∏î \"‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà\" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà")

# ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
if ss.get("history"):
    st.subheader("üìú ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô")
    for i, line in enumerate(ss.history, 1):
        st.write(f"{i}. {line}")

# ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
if ss.get("stats"):
    st.subheader("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô")
    ordered = sorted(ss.stats.items(), key=lambda kv: (kv[1]["played"], -kv[1]["win"]))
    rows = [
        {
            "‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô": name,
            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏°‡∏ï‡∏ä‡πå": data["played"],
            "‡∏ä‡∏ô‡∏∞": data["win"],
            "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ä‡∏ô‡∏∞ (%)": round((data["win"]/data["played"]*100) if data["played"] else 0, 1),
        }
        for name, data in ordered
    ]
    st.table(rows)
