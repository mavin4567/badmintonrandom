import streamlit as st
import random
import graphviz

# ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
players = ["‡∏ß‡∏¥‡∏ô", "‡πÇ‡∏ï‡πä‡∏î", "‡∏ï‡∏¥‡∏ô", "‡∏ï‡πà‡∏≠", "‡∏°‡∏∏‡∏Å", "‡πÄ‡∏ü‡∏¥‡∏£‡πå‡∏ô", "‡∏Å‡∏±‡∏ô‡∏î‡∏±‡πâ‡∏°", "‡πÇ‡∏Å‡πâ"]

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô reset ‡πÄ‡∏Å‡∏°
def reset_game():
    shuffled = players[:]
    random.shuffle(shuffled)
    st.session_state.teams = [shuffled[i:i+2] for i in range(0, len(shuffled), 2)]
    st.session_state.current_team = st.session_state.teams[0]
    st.session_state.queue = st.session_state.teams[1:]
    st.session_state.streak = {}
    st.session_state.match_no = 1
    st.session_state.rounds_played = 0
    st.session_state.total_rounds = len(players)//2
    st.session_state.history = []  # ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
    st.session_state.last_winner = None
    st.session_state.loser_pool = []  # ‡πÄ‡∏Å‡πá‡∏ö‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏û‡πâ‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô session_state
if "teams" not in st.session_state:
    reset_game()

st.title("üè∏ Badminton Live Scheduler")

# ‡∏õ‡∏∏‡πà‡∏° Reset ‡πÄ‡∏Å‡∏°
if st.button("üîÑ Reset ‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà"):
    reset_game()
    st.success("‡πÄ‡∏Å‡∏°‡∏ñ‡∏π‡∏Å‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏•‡∏∞‡∏™‡∏∏‡πà‡∏°‡∏ó‡∏µ‡∏°‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")

# ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
st.subheader("‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ")
for i, t in enumerate(st.session_state.teams, 1):
    st.write(f"‡∏ó‡∏µ‡∏° {i}: {t[0]} + {t[1]}")

# ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ó‡∏µ‡∏°‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
if st.session_state.queue and st.session_state.current_team:
    challenger = st.session_state.queue[0]
    st.markdown(f"### ‡πÅ‡∏°‡∏ï‡∏ä‡πå {st.session_state.match_no}")
    st.write(f"{st.session_state.current_team[0]} + {st.session_state.current_team[1]}  VS  {challenger[0]} + {challenger[1]}")

    col1, col2, col3 = st.columns(3)
    win_choice = None
    if col1.button("‡∏ó‡∏µ‡∏°‡∏ã‡πâ‡∏≤‡∏¢‡∏ä‡∏ô‡∏∞ ‚úÖ", key=f"left_{st.session_state.match_no}"):
        win_choice = "current"
    if col2.button("‡∏ó‡∏µ‡∏°‡∏Ç‡∏ß‡∏≤‡∏ä‡∏ô‡∏∞ ‚úÖ", key=f"right_{st.session_state.match_no}"):
        win_choice = "challenger"
    if col3.button("‚û°Ô∏è ‡∏ï‡πà‡∏≠‡πÑ‡∏õ", key=f"next_{st.session_state.match_no}"):
        win_choice = st.session_state.last_winner

    if win_choice:
        if win_choice == "current":
            winner = st.session_state.current_team
            loser = challenger
            # challenger ‡πÅ‡∏û‡πâ ‚Üí ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô loser_pool
            st.session_state.loser_pool.append(challenger)
        elif win_choice == "challenger":
            winner = challenger
            loser = st.session_state.current_team
            # current ‡πÅ‡∏û‡πâ ‚Üí ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô loser_pool
            st.session_state.loser_pool.append(st.session_state.current_team)
            st.session_state.current_team = challenger
        else:
            winner = None
            loser = None

        if winner:
            key = "+".join(winner)
            st.session_state.streak[key] = st.session_state.streak.get(key, 0) + 1
            st.success(f"‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞: {winner[0]} + {winner[1]} (‡∏ä‡∏ô‡∏∞‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô {st.session_state.streak[key]} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)")

            # ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
            st.session_state.history.append({
                "‡πÅ‡∏°‡∏ï‡∏ä‡πå": st.session_state.match_no,
                "‡∏ó‡∏µ‡∏°‡∏ä‡∏ô‡∏∞": f"{winner[0]} + {winner[1]}",
                "‡∏ó‡∏µ‡∏°‡πÅ‡∏û‡πâ": f"{loser[0]} + {loser[1]}"
            })

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            st.session_state.last_winner = "current"

            # ‡∏ñ‡πâ‡∏≤‡∏ä‡∏ô‡∏∞‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‚Üí ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏û‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡∏°‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏û‡πâ‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å
            if st.session_state.streak[key] >= 2:
                st.warning(f"‡∏ó‡∏µ‡∏° {winner[0]}+{winner[1]} ‡∏ä‡∏ô‡∏∞ 2 ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ï‡∏¥‡∏î ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏£‡∏≠‡∏Å‡πà‡∏≠‡∏ô!")
                st.session_state.queue.pop(0)  # challenger ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß

                if st.session_state.queue and st.session_state.loser_pool:
                    # ‡∏ó‡∏µ‡∏°‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß‡∏°‡∏≤‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà
                    st.session_state.current_team = st.session_state.queue.pop(0)
                    # ‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏û‡πâ‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å
                    st.session_state.queue.insert(0, st.session_state.loser_pool.pop(0))
                else:
                    st.session_state.current_team = None
            else:
                # ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏õ‡∏Å‡∏ï‡∏¥ ‚Üí challenger ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏≠‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß
                st.session_state.queue.pop(0)

            # ‡πÑ‡∏õ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            st.session_state.match_no += 1

            # ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß‡∏´‡∏°‡∏î = ‡∏Ñ‡∏£‡∏ö‡∏£‡∏≠‡∏ö
            if not st.session_state.queue:
                st.session_state.rounds_played += 1
                if st.session_state.rounds_played >= st.session_state.total_rounds:
                    st.info("üé≤ ‡∏Ñ‡∏£‡∏ö‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß! ‡∏™‡∏∏‡πà‡∏°‡∏ó‡∏µ‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
                    reset_game()
        else:
            st.warning("‚ùó ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡∏ä‡∏ô‡∏∞‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏Å‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÑ‡∏î‡πâ")

# ‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
st.subheader("üìä ‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô")
view_mode = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•", ["‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°", "Bracket View"])

if view_mode == "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°":
    if st.session_state.history:
        for record in st.session_state.history[::-1]:
            st.write(f"‡πÅ‡∏°‡∏ï‡∏ä‡πå {record['‡πÅ‡∏°‡∏ï‡∏ä‡πå']}: üèÜ {record['‡∏ó‡∏µ‡∏°‡∏ä‡∏ô‡∏∞']} ‡∏ä‡∏ô‡∏∞ ‚ùå {record['‡∏ó‡∏µ‡∏°‡πÅ‡∏û‡πâ']}")
else:
    if st.session_state.history:
        dot = graphviz.Digraph()
        for record in st.session_state.history:
            match_label = f"Match {record['‡πÅ‡∏°‡∏ï‡∏ä‡πå']}"
            winner = record['‡∏ó‡∏µ‡∏°‡∏ä‡∏ô‡∏∞']
            loser = record['‡∏ó‡∏µ‡∏°‡πÅ‡∏û‡πâ']
            dot.node(winner, winner, shape="box", style="filled", color="lightgreen")
            dot.node(loser, loser, shape="box", style="filled", color="lightcoral")
            dot.edge(loser, match_label)
            dot.edge(winner, match_label, color="green")
            dot.node(match_label, match_label, shape="ellipse")
        st.graphviz_chart(dot)
    else:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á")
