import streamlit as st
import random

# -----------------------------
# Session State Initialization
# -----------------------------
if "players" not in st.session_state:
    st.session_state.players = []
if "teams" not in st.session_state:
    st.session_state.teams = []
if "current_match" not in st.session_state:
    st.session_state.current_match = None
if "winner_streak" not in st.session_state:
    st.session_state.winner_streak = {"team": None, "count": 0}
if "history" not in st.session_state:
    st.session_state.history = []
if "queue" not in st.session_state:
    st.session_state.queue = []   # ‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Ñ‡∏¥‡∏ß‡∏•‡∏á‡πÅ‡∏Ç‡πà‡∏á
if "stats" not in st.session_state:
    st.session_state.stats = {}   # ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ {player: {"played":0, "win":0}}

# -----------------------------
# Helper Functions
# -----------------------------
def init_stats(players):
    st.session_state.stats = {p: {"played": 0, "win": 0} for p in players}

def make_teams(players):
    """‡∏™‡∏∏‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡∏°"""
    random.shuffle(players)
    teams = [players[i:i+2] for i in range(0, len(players), 2)]
    return teams

def start_new_round():
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà: ‡∏™‡∏∏‡πà‡∏°‡∏ó‡∏µ‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏±‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß"""
    teams = make_teams(st.session_state.players)
    st.session_state.teams = teams
    st.session_state.queue = teams[2:] if len(teams) > 2 else []
    if len(teams) >= 2:
        st.session_state.current_match = (teams[0], teams[1])
    else:
        st.session_state.current_match = None
    st.session_state.winner_streak = {"team": None, "count": 0}
    st.session_state.history = []

def update_stats(players, winner=False):
    """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô"""
    for p in players:
        st.session_state.stats[p]["played"] += 1
        if winner:
            st.session_state.stats[p]["win"] += 1

def process_result(winner_side):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Ñ‡∏π‡πà‡πÉ‡∏´‡∏°‡πà"""
    team_left, team_right = st.session_state.current_match
    winner = team_left if winner_side == "left" else team_right
    loser = team_right if winner_side == "left" else team_left

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•
    st.session_state.history.append(f"{' & '.join(winner)} ‚úÖ ‡∏ä‡∏ô‡∏∞ {' & '.join(loser)} ‚ùå")

    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    update_stats(winner, winner=True)
    update_stats(loser, winner=False)

    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï streak
    if st.session_state.winner_streak["team"] == winner:
        st.session_state.winner_streak["count"] += 1
    else:
        st.session_state.winner_streak = {"team": winner, "count": 1}

    # ‡∏ñ‡πâ‡∏≤‡∏ä‡∏ô‡∏∞ 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡∏¥‡∏î -> ‡πÉ‡∏´‡πâ‡∏≠‡∏≠‡∏Å
    if st.session_state.winner_streak["count"] == 2:
        if st.session_state.queue:
            next_team = st.session_state.queue.pop(0)
            st.session_state.current_match = (loser, next_team)
        else:
            start_new_round()
    else:
        # ‡∏ó‡∏µ‡∏°‡∏ä‡∏ô‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏ï‡πà‡∏≠ -> ‡πÄ‡∏à‡∏≠‡∏ó‡∏µ‡∏°‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß
        if st.session_state.queue:
            next_team = st.session_state.queue.pop(0)
            st.session_state.current_match = (winner, next_team)
        else:
            start_new_round()

# -----------------------------
# UI
# -----------------------------
st.title("üè∏ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÅ‡∏ö‡∏î‡∏°‡∏¥‡∏ô‡∏ï‡∏±‡∏ô")
st.markdown("‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏™‡∏∏‡πà‡∏°‡∏ó‡∏µ‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏à
