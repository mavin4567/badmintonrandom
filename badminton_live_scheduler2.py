import streamlit as st
import random
from typing import List, Optional, Tuple

# ============================================================
# üè∏ Badminton Live Scheduler ‚Äî Stable + Auto Refresh
# ============================================================

DEFAULT_NAMES = ""
ss = st.session_state

# -----------------------------
# Session State Initialization
# -----------------------------
DEFAULTS = {
    "players": [],
    "current_match": None,  # Tuple[List[str], List[str]] | None
    "queue": [],
    "winner_streak": {"team": None, "count": 0, "first_loser": None},
    "history": [],
    "stats": {},
    "resting_player": None,
}
for k, v in DEFAULTS.items():
    if k not in ss:
        ss[k] = v

# -----------------------------
# Utilities
# -----------------------------
def force_rerun():
    """‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á st.rerun() ‡πÅ‡∏•‡∏∞ experimental (fallback)"""
    try:
        st.rerun()
    except Exception:
        try:
            st.experimental_rerun()  # type: ignore[attr-defined]
        except Exception:
            pass

def init_stats(players: List[str]):
    ss.stats = {p: {"played": 0, "win": 0} for p in players}

def _choose_resting_player(players: List[str]) -> Optional[str]:
    """‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ô‡∏û‡∏±‡∏Å‡πÅ‡∏ö‡∏ö‡∏¢‡∏∏‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°: ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏™‡∏∏‡∏î ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô‡∏™‡∏∏‡πà‡∏°"""
    if len(players) % 2 == 0:
        return None
    if not ss.stats:
        return random.choice(players)
    min_played = min(ss.stats.get(p, {"played": 0})["played"] for p in players)
    candidates = [p for p in players if ss.stats.get(p, {"played": 0})["played"] == min_played]
    return random.choice(candidates) if candidates else None

def _pair_teams(active_players: List[str]) -> List[List[str]]:
    shuffled = active_players[:]
    random.shuffle(shuffled)
    if len(shuffled) % 2 == 1:
        shuffled = shuffled[:-1]
    return [shuffled[i:i+2] for i in range(0, len(shuffled), 2)]

def _fmt_team(team: List[str]) -> str:
    return " & ".join(team)

def _valid_match(m) -> bool:
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ current_match ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô (teamA, teamB) ‡πÅ‡∏•‡∏∞‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ó‡∏µ‡∏°‡∏°‡∏µ 2 ‡∏Ñ‡∏ô"""
    if not isinstance(m, (list, tuple)) or len(m) != 2:
        return False
    a, b = m
    if not isinstance(a, (list, tuple)) or not isinstance(b, (list, tuple)):
        return False
    if len(a) != 2 or len(b) != 2:
        return False
    return True

# -----------------------------
# Round / Flow
# -----------------------------
def start_new_round():
    players = ss.players[:]
    if len(players) < 4:
        ss.current_match = None
        ss.queue = []
        return

    ss.resting_player = _choose_resting_player(players)
    active = [p for p in players if p != ss.resting_player] if ss.resting_player else players[:]

    teams = _pair_teams(active)
    if len(teams) < 2:
        ss.current_match = None
        ss.queue = []
        return

    ss.current_match = (teams[0], teams[1])
    ss.queue = teams[2:]
    # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ï‡∏£‡∏µ‡∏Ñ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà
    ss.winner_streak = {"team": None, "count": 0, "first_loser": None}

def _update_stats(team: List[str], *, is_winner: bool):
    for p in team:
        ss.stats.setdefault(p, {"played": 0, "win": 0})
        ss.stats[p]["played"] += 1
        if is_winner:
            ss.stats[p]["win"] += 1

def process_result(winner_side: str):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Ñ‡∏π‡πà‡πÉ‡∏´‡∏°‡πà ‡∏ï‡∏≤‡∏°‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤ + ‡∏Å‡∏±‡∏ô‡∏û‡∏±‡∏á‡∏ó‡∏∏‡∏Å‡∏Å‡∏£‡∏ì‡∏µ + refresh ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
    m = ss.get("current_match")
    if not m or not _valid_match(m):
        # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‚Äî ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ
        start_new_round()
        return

    left, right = m  # ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ó‡∏µ‡∏°‡πÄ‡∏õ‡πá‡∏ô list[str] ‡∏¢‡∏≤‡∏ß 2
    winner = left if winner_side == "left" else right
    loser = right if winner_side == "left" else left

    # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏°‡∏ú‡∏¥‡∏î‡∏£‡∏π‡∏õ
    if not (isinstance(winner, (list, tuple)) and isinstance(loser, (list, tuple))):
        start_new_round()
        return

    # ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ + ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    ss.history.append(f"{_fmt_team(winner)} ‚úÖ ‡∏ä‡∏ô‡∏∞ {_fmt_team(loser)} ‚ùå")
    _update_stats(winner, is_winner=True)
    _update_stats(loser, is_winner=False)

    # ‡∏™‡∏ï‡∏£‡∏µ‡∏Ñ
    if ss.winner_streak["team"] == winner:
        ss.winner_streak["count"] += 1
    else:
        ss.winner_streak = {"team": winner, "count": 1, "first_loser": loser}

    # ‡∏ä‡∏ô‡∏∞‡∏Ñ‡∏£‡∏ö 2 ‚Üí ‡∏ó‡∏µ‡∏°‡∏ä‡∏ô‡∏∞‡∏≠‡∏≠‡∏Å, ‡πÄ‡∏≠‡∏≤ first_loser ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏à‡∏≠‡∏ó‡∏µ‡∏°‡πÉ‡∏´‡∏°‡πà
    if ss.winner_streak["count"] >= 2:
        first_loser = ss.winner_streak.get("first_loser") or loser
        if ss.queue:
            incoming = ss.queue.pop(0)
            ss.current_match = (first_loser, incoming)
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡∏™‡∏ï‡∏£‡∏µ‡∏Ñ‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            ss.winner_streak = {"team": None, "count": 0, "first_loser": None}
        else:
            start_new_round()
    else:
        # ‡∏ó‡∏µ‡∏°‡∏ä‡∏ô‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏ï‡πà‡∏≠ ‡πÄ‡∏à‡∏≠‡∏ó‡∏µ‡∏°‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß
        if ss.queue:
            incoming = ss.queue.pop(0)
            ss.current_match = (winner, incoming)
        else:
            start_new_round()

    force_rerun()

# -----------------------------
# UI
# -----------------------------
st.title("üè∏ Badminton Live Scheduler")
st.caption("‡∏™‡∏∏‡πà‡∏°‡∏ó‡∏µ‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡∏à‡∏±‡∏î‡∏Ñ‡∏¥‡∏ß‡∏•‡∏∑‡πà‡∏ô‡πÑ‡∏´‡∏• ‡πÄ‡∏ô‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏¢‡∏∏‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏° ‚ú®")

st.subheader("üë• ‡πÉ‡∏™‡πà‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 16 ‡∏Ñ‡∏ô)")
names_input = st.text_area("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ (‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô)", DEFAULT_NAMES, height=180)
players = [n.strip() for n in names_input.split("\n") if n.strip()]

c_start, c_reset, c_refresh = st.columns(3)
with c_start:
    if st.button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà"):
        if len(players) < 4:
            st.error("‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 4 ‡∏Ñ‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ")
        elif len(players) > 16:
            st.error("‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 16 ‡∏Ñ‡∏ô")
        else:
            ss.players = players
            init_stats(players)
            start_new_round()
            st.success("‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")
            force_rerun()

with c_reset:
    if st.button("‚ôªÔ∏è Reset ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"):
        # ‡∏•‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ó‡∏∏‡∏Å‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô
        for k in list(ss.keys()):
            del ss[k]
        st.success("‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß")
        force_rerun()

with c_refresh:
    if st.button("üîÉ Refresh ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"):
        force_rerun()

# ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å
if ss.get("resting_player"):
    st.info(f"üë§ ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ: **{ss.resting_player}**")

# ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
m = ss.get("current_match")
if _valid_match(m):
    left, right = m
    st.subheader("üéØ ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")
    st.markdown(f"**‡∏ó‡∏µ‡∏°‡∏ã‡πâ‡∏≤‡∏¢:** {_fmt_team(left)}  \tüÜö\t  **‡∏ó‡∏µ‡∏°‡∏Ç‡∏ß‡∏≤:** {_fmt_team(right)}")

    c1, c2 = st.columns(2)
    with c1:
        if st.button("‚úÖ ‡∏ó‡∏µ‡∏°‡∏ã‡πâ‡∏≤‡∏¢‡∏ä‡∏ô‡∏∞"):
            process_result("left")
    with c2:
        if st.button("‚úÖ ‡∏ó‡∏µ‡∏°‡∏Ç‡∏ß‡∏≤‡∏ä‡∏ô‡∏∞"):
            process_result("right")

    # ‡∏Ñ‡∏¥‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    if isinstance(ss.get("queue"), list) and ss.queue:
        st.caption("‡∏Ñ‡∏¥‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:")
        for i, t in enumerate(ss.queue, 1):
            if isinstance(t, (list, tuple)):
                st.write(f"‚Ä¢ {_fmt_team(t)}")
else:
    if ss.get("players"):
        st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πà‡∏ô ‚Äî ‡∏Å‡∏î \"‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà\" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà")

# ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
if isinstance(ss.get("history"), list) and ss.history:
    st.subheader("üìú ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô")
    for i, line in enumerate(ss.history, 1):
        st.write(f"{i}. {line}")

# ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
if isinstance(ss.get("stats"), dict) and ss.stats:
    st.subheader("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô")
    ordered = sorted(ss.stats.items(), key=lambda kv: (kv[1].get("played", 0), -kv[1].get("win", 0)))
    table_rows = [
        {
            "‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô": name,
            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏°‡∏ï‡∏ä‡πå": data.get("played", 0),
            "‡∏ä‡∏ô‡∏∞": data.get("win", 0),
            "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ä‡∏ô‡∏∞ (%)": round((data.get("win", 0) / data.get("played", 0) * 100) if data.get("played", 0) else 0, 1),
        }
        for name, data in ordered
    ]
    st.table(table_rows)
